{
  "name": "documentation-website",
  "version": "1.0.378",
  "description": "Declarative multilanguage documentation website generator",
  "keywords": [
    "documentation",
    "website",
    "homepage",
    "page",
    "project"
  ],
  "bugs": {
    "email": "info@torben.website",
    "url": "https://github.com/thaibault/documentation-website/issues"
  },
  "license": "CC-BY-3.0",
  "author": {
    "name": "Torben Sickert",
    "email": "info@torben.website",
    "url": "https://torben.website"
  },
  "files": [
    "build/deploy.js",
    "build/deploy.d.ts",
    "source"
  ],
  "main": "source/index.html.ejs",
  "bin": "build/deploy.js",
  "repository": {
    "type": "git",
    "url": "git@github.io:thaibault/documentation-website.git"
  },
  "scripts": {
    "build": "yarn build:web; yarn build:deploy",
    "build:deploy": "weboptimizer build '{__reference__: \"target:deploy\"}'",
    "build:web": "weboptimizer build",
    "build:stats": "weboptimizer build --profile --json /tmp/stats.json | sed --regexp-extended 's/^Running \".+$//' | sed --regexp-extended 's/^Consolidate module request \".+$//' >/tmp/stats.json && echo 'Results successfully written to \"/tmp/stats.json\".'",
    "check": "yarn check:types; yarn lint",
    "check:types": "weboptimizer check:types",
    "clear": "weboptimizer clear",
    "document": "weboptimizer document",
    "lint": "weboptimizer lint",
    "prepare": "yarn build",
    "serve": "weboptimizer serve",
    "start": "yarn serve",
    "test": "yarn clear && weboptimizer test",
    "test:browser": "yarn clear && weboptimizer test:browser",
    "test:coverage": "yarn clear && weboptimizer test:coverage",
    "test:coverage:report": "yarn clear && weboptimizer test:coverage:report",
    "watch": "weboptimizer build --watch"
  },
  "devDependencies": {
    "@aws-sdk/client-s3": "^3.830.0",
    "@babel/eslint-parser": "^7.27.5",
    "@babel/runtime": "^7.27.6",
    "@stylistic/eslint-plugin": "^4.4.1",
    "@types/archiver": "^6.0.3",
    "@types/ejs": "^3.1.5",
    "@types/html-minifier": "^4.0.5",
    "@types/jquery": "^3.5.32",
    "@types/jsdom": "^21.1.7",
    "@types/marked": "^6.0.0",
    "@types/node": "^24.0.3",
    "@types/unzipper": "^0.10.11",
    "@typescript-eslint/eslint-plugin": "^8.34.1",
    "@typescript-eslint/parser": "^8.34.1",
    "archiver": "^7.0.1",
    "clientnode": "^3.0.1291",
    "css-loader": "^7.1.2",
    "cssnano": "^7.0.7",
    "default-gateway": "^7.2.2",
    "errorreporter": "^1.0.326",
    "eslint": "^9.29.0",
    "eslint-config-google": "^0.14.0",
    "eslint-plugin-jsdoc": "^51.0.3",
    "favicons": "^7.2.0",
    "favicons-webpack-plugin": "^6.0.1",
    "highlight.js": "^11.11.1",
    "internationalisation": "^1.0.338",
    "jest": "^30.0.0",
    "jquery": "^3.7.1",
    "jsdoc": "^4.0.4",
    "legal-notes": "^1.0.25",
    "marked": "^15.0.12",
    "mini-css-extract-plugin": "^2.9.2",
    "postcss": "^8.5.6",
    "postcss-fontpath": "^1.0.0",
    "postcss-import": "^16.1.1",
    "postcss-loader": "^8.1.1",
    "postcss-mixins": "^11.0.3",
    "postcss-nested": "^7.0.2",
    "postcss-preset-env": "^10.2.3",
    "postcss-sprites": "^4.2.1",
    "postcss-url": "^10.1.3",
    "spin.js": "^4.1.2",
    "style-loader": "^4.0.0",
    "stylelint": "^16.20.0",
    "stylelint-config-standard": "^38.0.0",
    "typescript-eslint": "^8.34.1",
    "ua-parser-js": "^2.0.3",
    "unzipper": "^0.12.3",
    "weboptimizer": "^2.0.1587",
    "webpack-dev-server": "^5.2.2",
    "website-utilities": "^1.0.367"
  },
  "engines": {
    "node": ">=20",
    "npm": ">=10",
    "yarn": ">=4"
  },
  "resolutions": {
    "colors": "1.4.0",
    "globals@npm:^14.0.0": "patch:globals@npm%3A11.12.0#~/.yarn/patches/globals-npm-11.12.0-1fa7f41a6c.patch",
    "globals@npm:^11.1.0": "patch:globals@npm%3A11.12.0#~/.yarn/patches/globals-npm-11.12.0-1fa7f41a6c.patch",
    "globals@npm:^9.18.0": "patch:globals@npm%3A11.12.0#~/.yarn/patches/globals-npm-11.12.0-1fa7f41a6c.patch"
  },
  "sideEffects": true,
  "webOptimizer": {
    "build": {
      "definitions": {
        "TRACKING_CODE": {
          "__evaluate__": "`'${self.module.preprocessor.html.options.locals.TRACKING_CODE}'`"
        },
        "LANGUAGES": {
          "__evaluate__": "`['${self.module.preprocessor.html.options.locals.LANGUAGES.join(\"', '\")}']`"
        }
      }
    },
    "commandLine": {
      "test": {
        "environments": [
          "jsdom"
        ]
      }
    },
    "injection": {
      "chunks": false,
      "entry": {
        "#": "errorreporter\": \"errorreporter",
        "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2].startsWith('test') ? {testBundle: './test.ts'} : {index: ['ua-parser-js', './index.css', './index']}"
      }
    },
    "library": false,
    "module": {
      "aliases": {
        "^jquery$": "jquery/dist/jquery.min.js"
      },
      "enforceDeduplication": true,
      "optimizer": {
        "#": "We have to add disable \"mergeRules\" since it removes header link color over writing.",
        "cssnano": {
          "__evaluate__": "self.debug ? null : {preset: [optionalRequire('cssnano-preset-default'), {autoprefixer: false, discardUnused: !self.library, mergeRules: false}]}"
        },
        "htmlMinifier": {
          "ignoreCustomComments": [
            {
              "__evaluate__": "/^\\|?[a-z]{2}[A-Z]{2}:/"
            },
            {
              "__evaluate__": "/^[a-z]{2}[A-Z]{2}$/"
            },
            {
              "__evaluate__": "/^showExample(?::[a-zA-Z]+)?$/"
            }
          ]
        }
      },
      "preprocessor": {
        "cascadingStyleSheet": {
          "additional": {
            "plugins": {
              "pre": {
                "__append__": [
                  "require('postcss-mixins')",
                  "require('postcss-nested')"
                ]
              }
            }
          }
        },
        "ejs": {
          "options": {
            "locals": {
              "API_DOCUMENTATION_PATH": "/apiDocumentation/",
              "CONTENT": "source/dummyReadme.md",
              "DISTRIBUTION_BUNDLE_FILE_PATH": "dummyDistributionBundle.zip",
              "LANGUAGES": {
                "__evaluate__": "self.module.preprocessor.html.options.locals.NAME === 'documentation-website' ? ['enUS', 'deDE', 'frFR'] : ['enUS']"
              },
              "MARKED_OPTIONS": {
                "#": "A prefix url for any relative link.",
                "baseUrl": "",
                "#1": "If true, add <br> on a single line break (copies GitHub behavior on comments, but not on rendered markdown files). Requires gfm be true.",
                "breaks": false,
                "#2": "If true, use approved GitHub Flavored Markdown (GFM) specification.",
                "gfm": true,
                "#3": "If true, include an id attribute when emitting headings (h1, h2, h3, etc).",
                "headerIds": true,
                "#4": "A string to prefix the id attribute when emitting headings (h1, h2, h3, etc).",
                "headerPrefix": "doc-",
                "#5": "A function to highlight code blocks, see Asynchronous highlighting.",
                "highlight": {
                  "__execute__": "const highlightModule = require('highlight.js'); const {getLanguage, highlight} = highlightModule; return (code, language) => (highlight(code, {language: getLanguage(language) ? language : 'plaintext'}).value)"
                },
                "#6": "A string to prefix the className in a <code> block. Useful for syntax highlighting.",
                "langPrefix": "language-",
                "#7": "If true, autolinked email address is escaped with HTML character references.",
                "mangle": true,
                "#8": "If true, conform to the original markdown.pl as much as possible. Don't fix original markdown bugs or behavior. Turns off and overrides gfm.",
                "pedantic": false,
                "#9": "An object containing functions to render tokens to HTML. See extensibility for more details.",
                "#10": "renderer: new Renderer()",
                "#11": "A function to sanitize the HTML passed into markdownString.",
                "sanitizer": {
                  "__evaluate__": "functions.identity"
                },
                "#12": "If true, the parser does not throw any exception.",
                "silent": false,
                "#13": "If true, use smarter list behavior than those found in markdown.pl.",
                "smartLists": true,
                "#14": "If true, use \"smart\" typographic punctuation for things like quotes and dashes.",
                "smartypants": true,
                "#15": "An object containing functions to create tokens from markdown. See extensibility for more details.",
                "#16": "tokenizer: new Tokenizer()",
                "#17": "A function which is called for every token. See extensibility for more details.",
                "walkTokens": {
                  "__evaluate__": "undefined"
                },
                "#18": "If true, emit self-closing HTML tags for void elements (<br/>, <img/>, etc.) with a \"/\" as required by XHTML.",
                "xhtml": true
              },
              "NAME": "documentation-website",
              "READ_FILE": {
                "__evaluate__": "fs.readFileSync"
              },
              "RENDER_MARKDOWN": {
                "__execute__": "const {parse, use} = require('marked'); use(self.module.preprocessor.ejs.options.locals.MARKED_OPTIONS); return parse"
              },
              "META_TAGS": [],
              "SOURCE_URL": {
                "__evaluate__": "`https://github.com/thaibault/${self.module.preprocessor.html.options.locals.NAME}`"
              },
              "TAGLINE": "generic documentation website pattern",
              "URL": {
                "__evaluate__": "`https://torben.website/${self.module.preprocessor.html.options.locals.NAME}`"
              }
            }
          }
        }
      },
      "skipParseRegularExpressions": {
        "__evaluate__": "/(?:^|\\/)(?:(?:jquery\\/dist\\/jquery))(?:\\.min)?\\.js(?:\\?.+|$)/"
      }
    },
    "path": {
      "source": {
        "asset": {
          "cascadingStyleSheet": "./",
          "javaScript": "./"
        }
      },
      "target": {
        "asset": {
          "cascadingStyleSheet": "./",
          "javaScript": "./"
        }
      }
    },
    "target:debug": {
      "module": {
        "optimizer": {
          "cssnano": null
        }
      }
    },
    "target:deploy": {
      "assetPattern": {
        "javaScript": {
          "pattern": {
            "#": "This is how we can make our main exported artefact executable.",
            "__evaluate__": "`#!/usr/bin/env node\n// -*- coding: utf-8 -*-\n${self.generic.assetPattern.javaScript.pattern}{1}`"
          }
        }
      },
      "exportFormat": {
        "external": "commonjs2",
        "self": "commonjs2"
      },
      "files": {
        "defaultHTML": {
          "template": {
            "filePath": "none"
          }
        }
      },
      "injection": {
        "entry": {
          "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2].startsWith('test') ? {testBundle: './test.ts'} : {deploy: './deploy'}"
        }
      },
      "module": {
        "optimizer": {
          "babelMinify": {
            "#": "To provide a logging output we need to exclude this feature.",
            "bundle": {
              "transform": {
                "removeConsole": false
              }
            },
            "module": {
              "removeConsole": false
            }
          }
        }
      },
      "targetTechnology": {
        "boilerplate": "node",
        "payload": "node"
      }
    }
  },
  "packageManager": "yarn@4.9.2+sha512.1fc009bc09d13cfd0e19efa44cbfc2b9cf6ca61482725eb35bbc5e257e093ebf4130db6dfe15d604ff4b79efd8e1e8e99b25fa7d0a6197c9f9826358d4d65c3c"
}