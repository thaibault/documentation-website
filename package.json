{
    "name": "documentationWebsite",
    "version": "1.0.0",
    "keywords": ["documentation", "website", "project", "homepage", "page"],
    "description": "documentationWebsite",
    "license": "CC-BY-3.0",
    "files": ["build"],
    "main": "build/index.html",
    "repository": {
        "type": "git",
        "url": "git@github.io:thaibault/documentationWebsite.git"
    },
    "dependencies": {
        "bootstrap": "3.3.6",
        "websiteUtilities": "latest"
    },
    "devDependencies": {
        "jsdom": "latest",
        "legalNotes": "git+ssh://git@github.com/thaibault/legalNotes.git",
        "source-map-support": "latest",
        "webOptimizer": "latest"
    },
    "webOptimizer": {
        "buildDefinition": {
            "GOOGLE_TRACKING_CODE": {
                "__evaluate__": "`'${self.module.preprocessor.pug.locals.GOOGLE_TRACKING_CODE}'`"
            },
            "LANGUAGES": {
                "__evaluate__": "`['${self.module.preprocessor.pug.locals.LANGUAGES.join(\"', '\")}']`"
            }
        },
        "injection": {"internal": {
            "vendor": {
                "__evaluate__": "self.debug && 2 < self.givenCommandLineArguments.length && ['buildDLL', 'serve', 'watchDLL'].includes(self.givenCommandLineArguments[2]) ? 'websiteUtilities' : []"
            },
            "index": {
                "__evaluate__": "[self.path.asset.cascadingStyleSheet + 'index'].concat(self.debug ? [] : 'babel-polyfill').concat(self.debug && self.dllManifestFilePaths.length && 2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'serve' ? [`webpack-dev-server/client?${self.development.server.protocol}://0.0.0.0:${self.development.server.port}`, 'webpack/hot/dev-server'] : []).concat(self.offline ? 'offline-plugin/runtime' : []).concat('index')"
            }
        }},
        "library": false,
        "module": {
            "aliases": {
                "bootstrap$": "bootstrap/dist/css/bootstrap.css",
                "babel-polyfill$": "babel-polyfill/dist/polyfill.min",
                "scrollTo$": "jquery.scrollto/jquery.scrollTo",
                "jQuery-spin$": "spin.js/jquery.spin"
            },
            "optimizer": {"htmlMinifier": {"ignoreCustomComments": [
                {"__evaluate__": "/^\\|?[a-z]{2}[A-Z]{2}:/"},
                {"__evaluate__": "/^[a-z]{2}[A-Z]{2}$/"},
                {"__evaluate__": "/^showExample(?::[a-zA-Z]+)?$/"}
            ]}},
            "preprocessor": {"pug": {"locals": {
                "API_DOCUMENTATION_PATH": "/apiDocumentation/",
                "CONTENT_FILE_PATH": "dummyDocumentation.pug",
                "DISTRIBUTION_BUNDLE_FILE_PATH": "dummyDistributionBundle.zip",
                "LANGUAGES": ["deDE", "enUS", "frFR"],
                "NAME": "documentationWebsite",
                "RENDER_CONTENT": true,
                "TAGLINE": "generic documentation website pattern"
            }}},
            "skipParseRegularExpression": {
                "__evaluate__": "/\\/(?:(?:clientNode(?:\\.compiled)?)|(?:jquery)|(?:module)|(?:spin)|([^/]+\\.min))\\.js(?:\\?.+|$)/"
            }
        },
        "path": {"source": {"asset": {"javaScript": "./"}}}
    },
    "scripts": {
        "build": "webOptimizer build",
        "buildDLL": "webOptimizer buildDLL",
        "buildWithStats": "webOptimizer build --profile --json >/tmp/stat.json && echo 'Results successfully written to \"/tmp/stat.json\".'",
        "clear": "webOptimizer clear",
        "document": "webOptimizer document",
        "lint": "webOptimizer typeCheck && webOptimizer lint",
        "prepublish": "npm run build",
        "serve": "webOptimizer serve",
        "start": "npm run serve",
        "update": "npm version patch && npm publish",
        "watch": "webOptimizer build --watch",
        "watchDLL": "webOptimizer buildDLL --watch"
    }
}
