{"name":"installArchLinux","tagline":"This script provides a full unnatted way to install arch linux from any live environement.","body":"<!--## [Inhalt](#inhalt)-->\r\n## <a name=\"inhalt\" href=\"#inhalt\">Inhalt</a>\r\n\r\n* [Inhalt](#inhalt)\r\n* [Einstieg](#einstieg)\r\n* [Installation auf ein Block Device](#installation-auf-ein-block-device)\r\n* [Installation auf eine Partition](#installation-auf-eine-partition)\r\n* [Installation in einen Ordner](#installation-in-einen-ordner)\r\n* [Automatische Konfiguration](#automatische-konfiguration)\r\n* [InstallArchLinux im Decorator Pattern](#installarchlinux-im-decorator-pattern)\r\n* [InstallArchLinux API](#installarchlinux-api)\r\n* [InstallArchLinux Options](#installarchlinux-options)\r\n* [Offline Installieren](#offline-installieren)\r\n* [Installieren ohne root Rechte](#installieren-ohne-root-rechte)\r\n* [Nützliches, Tipps, Debugging](#ntzliches-tipps-debugging)\r\n* [Abhängigkeiten](#abhngigkeiten)\r\n    * [Abhängigkeiten für Block Device Integation](#abhngigkeiten-fr-block-device-integation)\r\n    * [Optionale Abhängigkeiten](#optionale-abhngigkeiten)\r\n\r\n<!--[Einstieg](#einstieg)-->\r\n## <a name=\"einstieg\" href=\"#einstieg\">Einstieg</a>\r\n\r\nUm die neuste Version zu erhalten sollte man das Bash-Script runterladen: [installArchLinux](https://raw.github.com/thaibault/installArchLinux/master/installArchLinux.bash)\r\n\r\n    >>> wget https://raw.github.com/thaibault/installArchLinux/master/installArchLinux.bash \\\r\n        -O installArchLinux.bash && chmod +x installArchLinux.bash\r\n\r\nInstallArchLinux ist das zentrale Module um eine Reihe von Aufgaben im Zuge der\r\nVorbereitung, Installation, Konfiguration oder Manipulieren eines\r\n\"Linux from Scratch\" durchzuführen.\r\n\r\nDas Module kann im einfachsten Fall (z.B. von einer beliebigen Life Linux\r\nUmgebung) gestartet werden.\r\n\r\n    >>> ./installArchLinux.bash\r\n\r\nIn diesem Fall werden alle benötigten Informationen zur Einrichtung\r\n(nur Hostname) des Systems vor Beginn des Installations Prozesses interaktiv\r\nabgefragt.\r\nZu Beachten ist: ohne zusätzliche Parameter gibt das Module keinen Feedback über den\r\naktuellen Zustand des Installations Vorgangs.\r\nMit:\r\n\r\n    >>> ./installArchLinux.bash --verbose\r\n\r\nbekommt man einen etwas geschwätzigeren Installations Vorgang.\r\nMit:\r\n\r\n    >>> ./installArchLinux.bash --verbose --debug\r\n\r\nwerden alle Ausgaben jeglicher verwendeten Subprogramme mit ausgegeben.\r\n\r\nAlle wichtigen Parameter wie Installations Ort haben Standardwerte.\r\nSo Wird im obigen Fall einfach auf das erste gefundene Block Device installiert\r\n(/dev/sda).\r\nWill man lieber eine unbeaufsichtigte Installation:\r\n\r\n    >>> ./installArchLinux.bash --host-name testSystem --auto-partitioning\r\n\r\n<!--[Installation auf ein Block Device](#installation-auf-ein-block-device)-->\r\n## <a name=\"installation-auf-ein-block-device\" href=\"#installation-auf-ein-block-device\">Installation auf ein Block Device</a>\r\n\r\nIm typischen Fall will man von einer Life-CD booten um das System auf\r\neiner Festplatte zu installieren. Hierbei müssen folgende Aufgaben erfüllt\r\nwerden.\r\n\r\n* Einrichtung einer Internet Verbindung (siehe auch Abschnitt \"Offline Installation\")\r\n* Partitionierung der Ziel Festplatte\r\n* Formatierung der Ziel Partitionen\r\n* Konfiguration des Betriebssystems\r\n* Installation und Einrichtung eines Boot-Loaders\r\n\r\nAlle Aufgaben bis auf die Einrichtung der Internet Verbindung (wird in der Regel\r\nvon der Host Umgebung geregelt) könne mit installArchLinux automatisiert\r\ndurchgeführt werden. Will man z.B auf das Block Device \"/dev/sdb\" installieren\r\nund sich nicht selber um die Partitionierung kümmern und den kompletten\r\nverfügbaren Platz für das Haupt System verwenden (es soll also keine Swap- oder\r\nDaten Partition erstellt werden).\r\nsieht das z.B. so aus:\r\n\r\n    >>> ./installArchLinux.bash --output-system /dev/sdb --auto-partitioning\r\n        --minimal-boot-space-in-procent 100\r\n\r\nMöchte man eine System-, Daten- und Swap Partition haben, installiert folgender\r\nBefehl:\r\n\r\n    >>> ./installArchLinux.bash --output-system /dev/sdb --auto-partitioning\r\n\r\ndiese in einem \"sinnvollen\" Verhältnis. Es wird versucht den Swap genauso groß\r\nwie den installierten RAM auszulegen um für spätere \"Suspend to Disk\"\r\nSzenarien vorbereitet zu sein.\r\nStandartmäßig werden jedoch nicht mehr als 20% für die Swap Partition eingesetzt.\r\nDie Systempartition nimmt in aller Regel mindestens 40% des verfügbaren Platzes\r\nein. Der Rest wird dann für die Daten Partition eingesetzt. Will man dieses\r\nVerhalten individualisieren:\r\n\r\n    >>> ./installArchLinux.bash --needed-boot-space-in-byte 500000000 \\\r\n        --minimal-boot-space-in-procent 50 --maximal-swap-space-in-procent 10\r\n        --output-system /dev/sdb --auto-partitioning\r\n\r\nSo werden in jedem Fall mindestens ca. 466 MB für das System reserviert und\r\nmindestens 50% des Festplattenplatz für das System eingesetzt. Der Swap-space\r\nist wenn möglich so groß wie der RAM jedoch nicht mehr als 10% des Block Devices\r\n\"/dev/sdb\". Der Rest wird für die Daten Partition (also maximal 40%) eingesetzt.\r\n\r\nMöchte man die Partitionierung nicht voll automatisch (oder wie eben\r\nbeschrieben halbautomatische) vornehmen. Erreicht man durch weglassen des\r\nParameters \"--auto-partitioning\" eine ncurses basierte Oberfläche, die das\r\nmanuelle Konfiguration des Systems erlaubt.\r\n\r\n    >>> ./installArchLinux.bash --output-system /dev/sdb\r\n    \r\nInstallArchLinux nimmt dann die erste Partition als System Partition.\r\nIst noch eine weitere Vorhanden, wird diese als Swap Space verwendet. Wenn auch\r\neine dritte erkannt wird, detektiert installArchLinux diese als Daten Partition.\r\nAlle weiteren Partitionen bleiben unberührt.\r\n\r\nAn dieser Stelle sei noch erwähnt, dass installArchLinux alle erstellten\r\nPartition automatisch mit Labels versieht. Um dieses Verhalten zu\r\nindividualisieren einfach folgende Optionen nutzen:\r\n\r\n    >>> ./installArchLinux.bash --boot-partition-label boot \\\r\n        --swap-partition-label auslagerung --data-partition-label stuff\r\n\r\n<!--[Installation auf eine Partition](#installation-auf-eine-partition)-->\r\n## <a name=\"installation-auf-eine-partition\" href=\"#installation-auf-eine-partition\">Installation auf eine Partition</a>\r\n\r\nUm z.B. aus einem Produktivsystem heraus eine alternative Linux Distribution\r\nauf eine weitere Partition zu installieren kann einfach folgender Befehl\r\nverwendet werden:\r\n\r\n    >>> ./installArchLinux.bash --output-system /dev/sdb2\r\n    \r\nHier wird auf die zweite Partition des zweiten Block Devices installiert.\r\nSofern \"grub2\" auf dem Hostsystem installiert ist und installArchLinux mit\r\nausreichend Rechten ausgeführt wurde, integriert installArchLinux die\r\nalternative Installation in grub boot menu. Dieses Feature funktioniert jedoch\r\nnur wenn \"os-prober\" installiert ist. Sonst muss man hier von Hand nachbessern.\r\nUm die alternative Linux Version auch booten zu können.\r\n\r\n<!--[Installation in einen Ordner](#installation-in-einen-ordner)-->\r\n## <a name=\"installation-in-einen-ordner\" href=\"#installation-in-einen-ordner\">Installation auf eine Partition</a>\r\n\r\nUm installArchLinux für komplexere Szenarien zu verwenden oder nachträgliche\r\nManipulationen vorzunehmen ist es sinnvoll zunächst in einen Ordner zu\r\ninstallieren. Siehe hierzu \"installArchLinux with Decorator Pattern\",\r\n\"makeXBMCLinux\", \"makeRamOnlyLinux\" oder \"makeSquashLinux\" bzw. das Projekt\r\n\"installArchLinuxWrapperTemplate\".\r\n\r\nDieser Befehl installiert ein vollständiges System in den eigenen Home-Ordner\r\n\"test\" (siehe auch Installation ohne root Rechte).\r\n\r\n    >>> ./installArchLinux.bash --output-system ~/test\r\n\r\n<!--[Automatische Konfiguration](#automatische-konfiguration)-->\r\n## <a name=\"automatische-konfiguration\" href=\"#automatische-konfiguration\">Automatische Konfiguration</a>\r\n\r\nInstallArchLinux konfiguriert das neu eingerichtete System vollautomatisch.\r\nFolgende Taske wurden automatisiert:\r\n\r\n* Tastaturlayout einstellen\r\n* Einrichten der richtigen Zeit Zone\r\n* Setzen des Hostnames\r\n* Setzen des default root Passworts nach \"root\"\r\n* Erstellen eines Benutzers bzw. Benutzerordner.\r\n  Das Passwort wird initial wie der Benutzer gesetzt.\r\n* dhcp Dienst einrichten (siehe automatisches Einrichten von Diensten)\r\n* Installation der Basis Programme (siehe automatische Installation von Programmen)\r\n* Einrichten der Signaturen für den Paketmanager \"Pacman\", um vertrauenswürdige\r\n  Pakete erhalten zu können.\r\n* Einrichten aller in der nähe liegenden Server um schnelle Packet Updates und\r\n  Paket Installationen zu gewährleisten.\r\n* Einrichten der richtigen Paketquellen abhängig von der aktuellen CPU\r\n  Architektur.\r\n\r\nWill man hierauf selber Einfluss nehmen, gibt es folgende Möglichkeiten:\r\n\r\n    >>> ./installArchLinux.bash --host-name test --user-names test \\\r\n        --cpu-architecture x86_64 --local-time /usr/share/zoneinfo/Europe/Paris \\\r\n        --key-map-configuration KEYMAP=\"de-latin1\\nFONT=Lat2-Terminus16\\nFONT_MAP=\"\r\n        --keyboard-layout de-latin1 --country-with-mirrors Germany\r\n        --prevent-using-pacstrap --additional-packages python vim\r\n        --needed-services sshd dhcpcd apache\r\n        \r\nUm die einzelnen Konfigurations Parameter zu verstehen empfiehlt sich ein Blick\r\nauf:\r\n\r\n    >>> ./installArchLinux.bash --help\r\n\r\nzu werfen.\r\n\r\n<!--[InstallArchLinux im Decorator Pattern](#installarchlinux-im-decorator-pattern)-->\r\n## <a name=\"installarchlinux-im-decorator-pattern\" href=\"#installarchlinux-im-decorator-pattern\">InstallArchLinux im Decorator Pattern</a>\r\n\r\nUm eigene Betriebsystembau Module zu entwerfen bietet installArchLinux eine\r\nVielzahl von Schnittstellen um seine internen Mechanismen separate nach Außen\r\nzugänglich zu machen (siehe hierzu die Decorator Implementierung\r\n\"installXBMCLinux\", \"makeRamOnlyLinux\", \"makeSquashLinux\" oder\r\n\"installArchLinxDecoratorTemplate\") und unsere Guidelines zum Erstellen eines\r\nWrappers.\r\n\r\nIm einfachsten Fall würde der Code der installArchLinux sinnvoll erweitert so\r\naussehen:\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nsource installArchLinux.bash\r\n\r\n# Do your own stuff cli logic here..\r\n# All your functions and variables are separated from the installArchLinux\r\n# scope.\r\n\r\n# Call the main Function of installArchLinux and overwrite or add\r\n# additional command line options.\r\ninstallArchLinux \"$@\" --output-system initramfsTargetLocation\r\n\r\n# Prepare result ...\r\n```\r\n\r\nBeachte, dass trotz des sourcen von installArchLinux auf diese Weise keine\r\nKonflikte zwischen dem Wrapper-Scope und dem installArchLinux-Scope entstehen\r\nkönnen. Die Einzige globale Variable ist \"installArchLinux\" selbst.\r\n\r\nWill man nun von den internen Features von installArchLinux partizipieren geht\r\ndas so:\r\n\r\n    >>> source installArchLinux.bash --load-environement\r\n    \r\nJetzt haben wir den gesamten Scope auch im Decorator zur Verfügung.\r\nAlle Methoden sind mit dem Prefix \"installArchLinux\" ausgestattet, um\r\nNamens Konflikte und versehentlich überschreiben von Methoden zu vermeiden.\r\nWill man sich also einen Überblick über alle verfügbaren Methoden machen,\r\neinfach in der shell folgendes eintippen:\r\n\r\n    >>> source installArchLinux.bash --load-environement\r\n    \r\n    >>> installArchLinux<TAB><TAB>\r\n    ...\r\n\r\nSiehe hierzu auch \"installArchLinux API\".\r\n\r\n<!--[InstallArchLinux API](#installarchlinux-api)-->\r\n## <a name=\"installarchlinux-api\" href=\"#installarchlinux-api\">InstallArchLinux API</a>\r\n\r\nFolgende Umgebungsvariablen können mit:\r\n\r\n    >>> source installArchLinux.bash --load-environement\r\n\r\ngeladen werden:\r\n\r\n```bash\r\n# Name des Moduls installArchLinux.\r\n__NAME__\r\n# \"local\" oder \"export\" je nachdem ob mit \"--load-environement\" geladen\r\n# wurde.\r\n_SCOPE\r\n# Abbilder der CLI-Parameter.\r\n_VERBOSE, _HOSTNAME, _USER_NAMES, _VERBOSE, _AUTO_PARTITIONING,\r\n_INSTALL_COMMON_ADDITIONAL_PACKAGES, _LOAD_ENVIRONEMENT, \r\n_CPU_ARCHITECTURE, _AUTOMATIC_REBOOT, _KEYBOARD_LAYOUT, _OUTPUT_SYSTEM,\r\n_COUNTRY_WITH_MIRRORS, _BOOT_PARTITION_LABEL, _SWAP_PARTITION_LABEL,\r\n_DATA_PARTITION_LABEL, _ADDITIONAL_PACKAGES, _NEEDED_SERVICES,\r\n_NEEDED_BOOT_SPACE_IN_BYTE, _MAXIMAL_SWAP_SPACE_IN_PROCENT,\r\n_MINIMAL_BOOT_SPACE_IN_PROCENT, _KEY_MAP_CONFIGURATION_FILE_CONTENT,\r\n_LOCAL_TIME, _MOUNTPOINT_PATH, _IGNORE_UNKNOWN_ARGUMENTS,\r\n_PREVENT_USING_PACSTRAP, _PREVENT_USING_NATIVE_ARCH_CHANGE_ROOT\r\n\r\n# Sinnvolle Umgebungsvariablen deren Wert z.T. zur Laufzeit ermittelt wurde.\r\n_NEEDED_PACKAGES, _PACKAGE_SOURCE_URLS, _BASIC_PACKAGES,\r\n_COMMON_ADDITIONAL_PACKAGES, _PACKAGES, _UNNEEDED_FILE_LOCATIONS,\r\n_STANDARD_OUTPUT, _ERROR_OUTPUT, _NEEDED_MOUNTPOINTS\r\n```\r\n\r\nDiese Methoden können von außen geladen und verwendet werden:\r\n\r\n```\r\n# Startet den installArchLinux Controller. Initiiert das Hauptprogramm.\r\ninstallArchLinux()\r\n\r\n# Liefert eine Beschreibung wie das Program verwendet werden kann.\r\n# Wenn die Variable \"__NAME__\" auf den Namen des Wrappers zeigt kann diese\r\n# Methode im Decorator Pattern Attraktiv sein.\r\ninstallArchLinuxPrintUsageMessage()\r\n\r\n# Liefert Beispiele wie das Program ausgeführt werden soll.\r\n# Werden im Decorator Pattern die Variablen durch gereicht und die\r\n# \"__NAME__\" Variable gesetzt, macht das Sinn.\r\ninstallArchLinuxPrintUsageExamples()\r\n\r\n# Liefert eine Beschreibung allen verfügbaren Optionen.\r\ninstallArchLinuxPrintCommandLineOptionDescriptions()\r\n\r\n# Vereinigt die Ausgabe der letzten drei Methoden.\r\ninstallArchLinuxPrintHelpMessage()\r\n\r\n# Parset Kommandozeilen-Eingaben und liefert aussagekräftige Fehler, wie\r\n# \"No such, file or directory!\" :-). Ne Spass.\r\ninstallArchLinuxCommandLineInterface()\r\n\r\n# Liefert eine einfache Methode zum Loggen. Wenn zwei Argumente übergeben\r\n# wurde, wird der erste als Loglevel interpretiert. Loglevel wie \"critical\"\r\n# oder \"error\" werden auch ohne cli flag \"--verbose\" angezeigt.\r\n# \"error\" führt zusätzlich zum Abbruch des Programms mit Fehlercode 1.\r\n#\r\n# >>> installArchLinuxLog <LOG_NACHRICHT>\r\n# >>> installArchLinuxLog <LOG_LEVEL> <LOG_NACHRICHT>\r\n# >>> installArchLinuxLog <LOG_LEVEL> <LOG_NACHRICHT> <STRING_VOR_DER_NACHRICHT>\r\n#\r\ninstallArchLinuxLog()\r\n\r\n# Installiert das Betriebssystem dorthin wo \"_MOUNPOINT_PATH\" hin zeigt.\r\n# \"_MOUNPOINT_PATH=test installArchLinuxWithPacstrap\" ist also eine\r\n# sinnvolle Verwendung.\r\ninstallArchLinuxWithPacstrap()\r\n\r\n# Diese Funktion erstellt in \"_MOUNTPOINT_PATH\" ein basis Linux (siehe).\r\n# Sie benötigt außer posix konforme System Schnittstellen keinerlei\r\n# zusätzliche Anwendungen wie \"pacman\".\r\ninstallArchLinuxGenericLinuxSteps()\r\n\r\n# Diese Funktion unterstützt das gleiche Interface wie \"chroot\" nur werden\r\n# abhängig von verfügbaren tools wie die \"arch-install-scripts\" möglichst\r\n# viele API-Dateisystem zum darunter liegenden System bereitgestellt.\r\n# Sollte kein \"arch-chroot\" wird sichergestellt, dass auf jeden Fall (siehe\r\n# \"_NEEDED_MOUNTPOINTS\") diese Orte in der neuen Umgebung bereitgestellt\r\n# werden:\r\n# \"/proc\", \"/sys\", \"/dev\", \"/dev/pts\", \"/dev/shm\", \"/run\", \"/tmp\",\r\n# \"/etc/resolv.conf\"\r\n#\r\n# >>> installArchLinuxChangeRoot <CHROOT_ARGUMENTE>*\r\n#\r\ninstallArchLinuxChangeRoot()\r\n\r\n# (wird von \"installArchLinuxChangeRoot()\" aufgerufen) Diese Funktion wird\r\n# verwendet, wenn \"arch-chroot\" nicht zur Verfügung steht oder die Flag\r\n# \"--prevent-using-native-arch-chroot\" gesetzt ist.\r\n#\r\n# >>> installArchLinuxChangeRoot <CHROOT_ARGUMENTE>*\r\n#\r\ninstallArchLinuxChangeRootViaMount()\r\n\r\n# Hier wird das linux native \"chroot\" oder \"fakechroot\" Program gewrappt.\r\n# Sind keine root Rechte vorhanden \"fakeroot\" und \"fakechroot\" installiert.\r\n# wird statt \"chroot $@\", \"fakeroot fakechroot chroot $@\" aufgerufen.\r\n#\r\n# >>> installArchLinuxChangeRoot <CHROOT_ARGUMENTE>*\r\n#\r\ninstallArchLinuxPerformChangeRoot()\r\n\r\n# Erledigt den meisten Linux typischen Konfigurationsaufwand wie\r\n# Erstellen eines Hostnamen oder des Tastaturlayouts.\r\ninstallArchLinuxConfigure()\r\n\r\n# Alle benötigten Dienste (siehe \"--needed-services\" werden aktiviert.\r\ninstallArchLinuxEnableServices()\r\n\r\n# Nicht benötigte Orte werden aufgeräumt (siehe \"_UNNEEDED_LOCATIONS\").\r\ninstallArchLinuxTidyUpSystem()\r\n\r\n# Erstellt eine Basisliste an verfügbaren Quellen um die ersten Pakete zu\r\n# beziehen (siehe \"_PACKAGE_SOURCE_URLS\").\r\ninstallArchLinuxAppendTemporaryInstallMirrors()\r\n\r\n# Verpackt ein erfolgreich erstelltes Linux in ein tar-Archiv.\r\ninstallArchLinuxPackResult()\r\n\r\n# Ermittelt eine aktuelle Liste aller Pakete aus den core Repositories von\r\n# pacman. Sie enthält die konkrete Url zu jeder Paket bzw. deren neusten\r\n# Version.\r\ninstallArchLinuxCreatePackageUrlList()\r\n\r\n# Ermittelt die aktuellen Abhängigkeiten von pacman.\r\ninstallArchLinuxDeterminePacmansNeededPackages()\r\n\r\n# Liest die Datenbank Dateien von Pacman und ermittelt welche Abhängigkeiten\r\n# notwendig sind um das übergebene Programm installieren zu können.\r\n# In installArchLinux wird diese Funktion nur verwendet um \"pacman\" selbst\r\n# lauffähig zu bekommen. Ab da übernimmt dieser das Auflösen von Abhängigkeiten.\r\n# Im Decorator Pattern kann diese Funktion jedoch sehr wertvoll werden, um\r\n# beliebige Abhängigkeiten zu ermitteln.\r\n#\r\n# >>> installArchLinuxDeterminePackageDependencies <PAKET> <DATENBANK_DATEI>\r\n#\r\ninstallArchLinuxDeterminePackageDependencies()\r\n\r\n# Ermittelt den Namen eines Paketordner in den Datenbankarchiven von\r\n# Pacman zu einem Program\r\n#\r\n# >>> installArchLinuxDeterminePackageDirectoryName <PROGRAMM_NAME>\r\n#\r\ninstallArchLinuxDeterminePackageDirectoryName()\r\n\r\n# Installiert die neuste pacman Version.\r\n#\r\n# >>> installArchLinuxDownloadAndExtractPacman <LISTE_ALLER_URLS_ZU_ALLEN_PAKETEN>\r\n#\r\ninstallArchLinuxDownloadAndExtractPacman()\r\n\r\n# Partitioniert ein Block Device \"_OUTPUT_SYSTEM\" nach einer sinnvollen\r\n# Heuristik. Siehe hierzu \"Installation auf ein Block Device\".\r\ninstallArchLinuxMakePartitions()\r\n\r\n# Erstellt autmatisch eine bootfähiger fstab Konfigurationsdatei in \r\n# \"_MOUNTPOINT_PATH/etc/fstab\".\r\ninstallArchLinuxGenerateFstabConfigurationFile()\r\n\r\n# Konfiguriert Grub2, so dass alle vorhanden Betriebssysteme im Bootmenu\r\n# angezeigt werden.\r\ninstallArchLinuxHandleBootLoader()\r\n\r\n# Unmounted \"_MOUNTPOINT_PATH\".\r\ninstallArchLinuxUnmountInstalledSystem()\r\n\r\n# Macht einen Neustart wenn die Installation erfolgreich war und die Flag\r\n# \"--no-reboot\" nicht gesetzt ist.\r\ninstallArchLinuxPrepareNextBoot()\r\n\r\n# Schreibt pacmans config so um, dass Paketsignaturüberprüfung\r\n# übersprungen werden. Dies ist notwendig wenn pacman ohne ein bereits\r\n# installiertes Pacman initial installiert werden soll.\r\ninstallArchLinuxConfigurePacman()\r\n\r\n# Ermittelt ob der Benutzer automatische Partitionierung wünscht.\r\n# So wird unbeabsichtigt Löschen von Daten verhindert.\r\ninstallArchLinuxDetermineAutoPartitioning()\r\n\r\n# Generert sinnvollen Inhalt für \"/etc/hosts\".\r\n#\r\n# >>> installArchLinuxGetHostsContent <HOST_NAME>\r\n#\r\ninstallArchLinuxGetHostsContent()\r\n\r\n# Bereitet das Installations block device vor. Erstellt Partitionen und\r\n# vergibt Labels.\r\ninstallArchLinuxPrepareBlockdevices()\r\n\r\n# Bereitet die boot Partition vor. Erstellt ein Dateisystem.\r\ninstallArchLinuxPrepareBootPartition()\r\n\r\n# Bereitet die swap Partition vor. Erstellt ein Dateisystem.\r\ninstallArchLinuxPrepareSwapPartition()\r\n\r\n# Bereitet die Daten-Partition vor. Erstellt ein Dateisystem.\r\ninstallArchLinuxPrepareDataPartition()\r\n\r\n# Formatiert alle notwendigen Partitionen.\r\ninstallArchLinuxFormatPartitions()\r\n\r\n# Installiert \"grub2\" als Bootloader.\r\ninstallArchLinuxIntegrateBootLoader()\r\n\r\n# Bereitet den Paket Cache vor der von pacman während der Installation\r\n# verwendet werden kann.\r\ninstallArchLinuxLoadCache()\r\n\r\n# Speichert alle bisher geladenen Pakete aus dem aktuell verwendeten Pacman\r\n# im Paket Cache (siehe \"_PACKAGE_CACHE_PATH\").\r\ninstallArchLinuxCache()\r\n\r\n# Erstellt sofern nicht vorhanden den Paket Cache und bereinigt das\r\n# Installations Ziel.\r\ninstallArchLinuxPrepareInstallation()\r\n```\r\n\r\n<!--[InstallArchLinux Options](#installarchlinux-options)-->\r\n## <a name=\"installarchlinux-options\" href=\"#installarchlinux-options\">InstallArchLinux Options</a>\r\n\r\nInstallArchLinux stellt ein Alphabet voller Optionen zur Verfügung.\r\nWährend bisher zum einfachen Verständis immer sog. Longoptions verwendet\r\nwurden, gibt es für jede Option auch einen Shortcut.\r\n\r\n    >>> ./installArchLinux.bash --user-names mustermann --host-name lfs\r\n\r\nist äquivalent zu:\r\n\r\n    >>> ./installArchLinux.bash -u mustermann -n lfs\r\n\r\nAlle Optionen bis auf \"--host-name\" und \"--auto-partitioning\"\r\nhaben Standardwerte. Alle Standardwert können mit Hilfe von:\r\n\r\n    >>> ./installArchLinux.bash -h\r\n\r\noder\r\n\r\n    >>> ./installArchLinux.bash --help\r\n\r\noder\r\n\r\n    >>> ./installArchLinux.bash --keyboard-layout de-latin1 -h\r\n\r\nangesehen werden. Letzteres macht Sinn, da sich Standardwerte aufgrund schon\r\nermittelten Informationen verändern können.\r\nSo wird der Standardwert von \r\n\"--key-map-configuration=\"KEYMAP=de-latin1\\nFONT=Lat2-Terminus16\\nFONT_MAP=\"\r\nnach Eingabe von \r\n\r\n    >>> ./installArchLinux.bash --keyboard-layout us\r\n    \r\nzu: \"--key-map-configuration=\"KEYMAP=us\\nFONT=Lat2-Terminus16\\nFONT_MAP=\".\r\n\r\nDer Standardwert von \"--cpu-architecture\" entspricht beispielsweise immer der\r\nArchitektur des aktuellen Systems, um Konfigurations Aufwand zu minimieren.\r\n\r\nMan kann Optionen die mehrere Werte annehmen auch mehrfach referenzieren.\r\nSo hat:\r\n\r\n    >>> ./installArchLinux.bash --additional-packages ssh --additional-packages vim -f python\r\n    \r\nden gleichen Effekt wie:\r\n\r\n    >>> ./installArchLinux.bash --additional-packages ssh vim python\r\n\r\nDies ist im Decorator-Pattern nützlich. Bei einem Doppelt referenzierten Wert\r\nüberschreiben spätere Werte zuvor Definierte. Folgendes:\r\n\r\n    >>> ./installArchLinux.bash --host-name A --host-name B\r\n\r\nentspricht:\r\n\r\n    >>> ./installArchLinux.bash --host-name B\r\n\r\nAuf diese Weise kann man getrost folgendes tun:\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nsource installArchLinux.bash\r\n\r\nmyTarget='/path/to/expected/result'\r\n\r\ninstallArchLinux \"$@\" --output-system $myTarget\r\n\r\n# Working with result in \"$myTarget\"\r\n```\r\n\r\nSelbst wenn der Wert von \"--output-system\" über die CLI gesetzt wurde ist sie\r\nim Wrapper wieder überschrieben werden.\r\n\r\n<!--[Offline Installieren](#offline-installieren)-->\r\n## <a name=\"offline-installieren\" href=\"#offline-installieren\">Offline Installieren</a>\r\n\r\ninstallArchLinux erstellt bei jeder Installation automatisch einen Paket-Cache\r\num weitere Installationen zu beschleunigen. Ist dieser einmal erstellt oder\r\nwird dieser zusammen mit dem installArchLinux (z.b. auf einem usb-stick)\r\nausgeliefert kann auch Offline installiert werden.\r\n\r\nSelbst wenn mit einem bereits vorhandenem Pacstrap installiert wird, wird\r\ndieser temporär kopiert, gepatched und anschließend offlinefähig ausgeführt!\r\n\r\nBei Offline Installation müssen natürchlich alle zusätzlich ausgewählten\r\nPakete im Package Cache vorhanden sein. Ist dies nicht der Fall wird\r\ninstallArchLinux versuchen diese nach zu laden und im Offline-Fall einen Fehler\r\nzurückgeben.\r\n\r\n<!--[Installieren ohne root Rechte](#installieren-ohne-root-rechte)-->\r\n## <a name=\"installieren-ohne-root-rechte\" href=\"#installieren-ohne-root-rechte\">Installieren ohne root Rechte</a>\r\n\r\nPrinzipiell ist es sogar möglich auch ohne root Rechte ein System aufzusetzen.\r\nHierbei werden jedoch folgende Einschnitte gemacht:\r\n\r\n* Die Programm \"tar\", \"fakeroot\" und \"fakechroot\" müssen installiert sein.\r\n* Ein bereits installiertes Pacstrap kann nicht eingesetzt werden\r\n* Dem zusätzlich erstellten Benutzer kann während der Installation kein\r\n  Home-Ordner erstellt werden, da die Rechte nicht richtig gesetzt werden\r\n  könnten.\r\n* Es kann nur in \"Ordner\" (bzw. siehe nächsten Punkt) installiert werden.\r\n* Das System wird in ein tar-Archiv ohne Speicherung entsprechende Dateirechte\r\n  Attribute gepakt.\r\n* Das Tar Archiv muss als \"root\" entpackt werden bevor das Ergebnis verwendet\r\n  oder fehlerfrei gebootet werden kann.\r\n\r\n<!--[Nützliches, Tipps, Debugging](#ntzliches-tipps-debugging)-->\r\n## <a name=\"ntzliches-tipps-debugging\" href=\"#ntzliches-tipps-debugging\">Nützliches, Tipps, Debugging</a>\r\n\r\nWährend der Entwicklung haben sich eine Reihe von Optionen bewährt um Fehler\r\nbei der Entwicklung von Wrappern zu finden.\r\n\r\nDie Option \"--prevent-using-pacstrap\" oder \"-p\" verhindert ein bereits\r\ninstallierten Pacman für die Installation zu verwenden.\r\nDies ist notwendig wenn man sein Pacman so konfiguriert hat, das z.B. Pakete\r\nwie der Kernel oder Pacman von manipulierten User Repositories abhängen. Mit\r\n\"--prevent-using-pacstrap\" wird eine neue Version von Pacman in einer\r\n\\u201cChangeRoot\\u201d Umgebung ausgeführt.\r\n\r\n\"--prevent-using-native-arch-chroot\" oder \"-y\" ist sinnvoll wenn man Indexing\r\nDienste wie Ubuntu's \"Zeitgeist\" oder \"Dropbox\" verwendet, die das Unmounten\r\nvon Mountpoints während der Installation verhindern, da sie auf diesen noch\r\nlesen/schreiben.\r\n\r\nInstalliert man von einer Life-CD auf ein Block Device bootet das System nach\r\nerfolgreicher Installation automatisch in das neu generiete System.\r\nWill man noch etwas nachbessern oder Überprüfen, bietet sich die\r\nselbsterklärende Option \"--no-reboot\" bzw. \"-r\" an.\r\n\r\nMöchte man die Pakete \"base-devel\", \"sudo\" und \"python\" haben, geht das mit\r\ndem Shortcut: \"--install-common-additional-packages\" oder \"-z\".\r\n\r\nWill man eine beliebige Liste von Paketen integrieren:\r\n\r\n    >>> ./installArchLinux.bash --additional-packages ssh python2 vim\r\n    \r\nSollen Dienste schon beim ersten Start automatisch gestartet werden:\r\n\r\n    >>> ./installArchLinux.bash --needed-services sshd dhcpcd\r\n    \r\nUm die Installation zu beschleunigen kann auf ein zentral verwalteten\r\nPaket Cache verwiesen werden:\r\n\r\n    >>> ./installArchLinux.bash --package-cache-path /var/cache/pacman/pkg/\r\n    \r\nWill man im Wrapper eine installArchLinux Option verstecken, weil man diese z.B.\r\nselber setzten will, eignet sich folgender Pattern:\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\ncat << EOF\r\nUsage: $0 <initramfsFilePath> [options]\r\n\r\n  $__NAME__ installs an arch linux into an initramfs file.\r\n\r\nOption descriptions:\r\n\r\n$(installArchLinuxPrintCommandLineOptionDescriptions \"$@\" | \\\r\n  sed '/^ *-[a-z] --output-system .*$/,/^$/d')\r\nEOF\r\n  }\r\n  \r\nmyTarget=$(mktemp)\r\n\r\ninstallArchLinux \"$@\" --output-system $myTarget\r\n\r\n# ...\r\n```\r\n\r\n<!--[Abhängigkeiten](#abhngigkeiten)-->\r\n## <a name=\"abhngigkeiten\" href=\"#abhngigkeiten\">Abhängigkeiten</a>\r\n\r\n* bash (or any bash like shell)\r\n* test - Check file types and compare values.\r\n* sed - Stream editor for filtering and transforming text.\r\n* wget - The non-interactive network downloader.\r\n* xz - Compress or decompress .xz and lzma files.\r\n* tar - The GNU version of the tar archiving utility.\r\n* mount - Filesystem mounter.\r\n* umount - Filesystem unmounter.\r\n* chroot - Run command or interactive shell with special root directory.\r\n* echo - Display a line of text.\r\n* ln - Make links between files.\r\n* touch - Change file timestamps or creates them.\r\n* grep - Searches the named input FILEs (or standard input if no files are\r\n         named, or if a single hyphen-minus (-) is given as file name) for\r\n         lines containing  a  match to the given PATTERN.  By default, grep\r\n         prints the matching lines.\r\n* shift - Shifts the command line arguments.\r\n* sync - Flushs file system buffers.\r\n* mktemp - Create a temporary file or directory.\r\n* cat - Concatenate files and print on the standard output.\r\n* blkid - Locate or print block device attributes.\r\n* uniq - Report or omit repeated lines.\r\n* uname - Prints system informations.\r\n\r\n<!--[Abhängigkeiten für Block Device Integation](#abhngigkeiten-fr-block-device-integation)-->\r\n### <a name=\"abhngigkeiten-fr-block-device-integation\" href=\"#abhngigkeiten-fr-block-device-integation\">Abhängigkeiten für Block Device Integation</a>\r\n\r\n* grub-bios - A full featured boot manager.\r\n* blockdev - Call block device ioctls from the command line.\r\n\r\n<!--[Optionale Abhängigkeiten](#optionale-abhngigkeiten)-->\r\n### <a name=\"optionale-abhngigkeiten\" href=\"#optionale-abhngigkeiten\">Optionale Abhängigkeiten</a>\r\n\r\n* arch-install-scripts - Little framework to generate a linux from scratch.\r\n* fakechroot - Wrappes some c-lib functions to enable programs like\r\n               \"chroot\" running without root privilegs.\r\n* os-prober - Detects presence of other operating systems.\r\n* mountpoint - See if a directory is a mountpoint.\r\n","google":"UA-40191664-1","note":"Don't delete this file! It's used internally to help with page regeneration."}